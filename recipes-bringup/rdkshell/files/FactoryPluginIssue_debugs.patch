Index: git/Source/core/Services.h
===================================================================
--- git.orig/Source/core/Services.h
+++ git/Source/core/Services.h
@@ -97,7 +97,9 @@ namespace Core {
 
     public:
         Library LoadLibrary(const TCHAR libraryName[]) {
+	    printf("###############Debug: Acquring lock to load library");
             Core::SafeSyncType<Core::CriticalSection> lock(_adminLock);
+	    printf("###############Debug: Acquired lock");
             return (Library(libraryName));
         }
         // There is *NO* locking around the _callback pointer. SO this callback 
Index: git/Source/WPEFramework/PluginServer.h
===================================================================
--- git.orig/Source/WPEFramework/PluginServer.h
+++ git/Source/WPEFramework/PluginServer.h
@@ -1850,12 +1850,16 @@ namespace PluginHost {
                 std::vector<string> all_paths = GetLibrarySearchPaths(name);
                 std::vector<string>::const_iterator iter = std::begin(all_paths);
 
+		printf("###############Debug: Going to load library %s", name);
                 while ( (iter != std::end(all_paths)) && (progressedState <= 2) ) {
                     Core::File libraryToLoad(*iter);
 
+		    printf("###############Debug: progressedState %d", progressedState);
                     if (libraryToLoad.Exists() == true) {
+			printf("###############Debug: Library exists to load");
                         if (progressedState == 0) {
                             progressedState = 1;
+			    printf("###############Debug: progressedState %d", progressedState);
                         }
 
                         // Loading a library, in the static initializers, might register Service::MetaData structures. As
@@ -1863,17 +1867,23 @@ namespace PluginHost {
                         // ServiceAdministrator, is already taken before entering the dlopen. This can only be achieved
                         // by forwarding this call to the ServiceAdministrator, so please so...
                         Core::Library newLib = Core::ServiceAdministrator::Instance().LoadLibrary(iter->c_str());
+			printf("###############Debug: LoadLibrary call done");
 
                         if (newLib.IsLoaded() == true) {
+				printf("###############Debug: Library is loaded");
                             if (progressedState == 1) {
                                 progressedState = 2;
+				printf("###############Debug: progressedState %d", progressedState);
                             }
 
                             Core::System::ModuleBuildRefImpl moduleBuildRef = reinterpret_cast<Core::System::ModuleBuildRefImpl>(newLib.LoadFunction(_T("ModuleBuildRef")));
                             Core::System::ModuleServiceMetadataImpl moduleServiceMetadata = reinterpret_cast<Core::System::ModuleServiceMetadataImpl>(newLib.LoadFunction(_T("ModuleServiceMetadata")));
+			    printf("###############Debug: progressedState %d", progressedState);
+
                             if ((moduleBuildRef != nullptr) && (moduleServiceMetadata != nullptr)) {
                                 result = newLib;
                                 progressedState = 3;
+				printf("###############Debug: progressedState %d", progressedState);
                                 if (_metadata.IsValid() == false) {
                                     _metadata = moduleServiceMetadata();
                                     if (_metadata.IsValid() == true) {
