Index: git/RDKShell/CMakeLists.txt
===================================================================
--- git.orig/RDKShell/CMakeLists.txt
+++ git/RDKShell/CMakeLists.txt
@@ -47,9 +47,23 @@ set_target_properties(${MODULE_NAME} PRO
 
 if (PLUGIN_RDKSHELL_READ_MAC_ON_STARTUP)
   add_definitions("-DRDKSHELL_READ_MAC_ON_STARTUP")
-  set(PLUGIN_RDKSHELL_EXTRA_LIBRARIES "-lFactory-hal")
+  set(PLUGIN_RDKSHELL_EXTRA_LIBRARIES "-ldeviceModeSelector")
+  include_directories(${STAGING_INCDIR}/rdk/tv-hal)
+  include_directories(${STAGING_INCDIR}/panel-data/)
 endif (PLUGIN_RDKSHELL_READ_MAC_ON_STARTUP)
 
+if (PLUGIN_RDKSHELL_DUAL_FTA_SUPPORT)
+  add_definitions("-DRDKSHELL_DUAL_FTA_SUPPORT")
+endif (PLUGIN_RDKSHELL_DUAL_FTA_SUPPORT)
+
+if (PLUGIN_RDKSHELL_IGNORE_PS_FLAG_ON_MBFTA)
+  add_definitions("-DRDKSHELL_IGNORE_PS_FLAG_ON_MBFTA")
+endif (PLUGIN_RDKSHELL_IGNORE_PS_FLAG_ON_MBFTA)
+
+if (PLUGIN_RDKSHELL_DUAL_ODM_SUPPORT)
+  add_definitions("-DRDKSHELL_DUAL_ODM_SUPPORT")
+endif (PLUGIN_RDKSHELL_DUAL_ODM_SUPPORT)
+
 target_compile_definitions(${MODULE_NAME} PRIVATE MODULE_NAME=Plugin_${PLUGIN_NAME})
 
 if(PLUGIN_HIBERNATESUPPORT)
Index: git/RDKShell/RDKShell.cpp
===================================================================
--- git.orig/RDKShell/RDKShell.cpp
+++ git/RDKShell/RDKShell.cpp
@@ -48,7 +48,7 @@
 #include "UtilsString.h"
 
 #ifdef RDKSHELL_READ_MAC_ON_STARTUP
-#include "FactoryProtectHal.h"
+#include "DeviceMode.h"
 #endif //RDKSHELL_READ_MAC_ON_STARTUP
 
 
@@ -202,6 +202,10 @@ static bool sRunning = true;
 bool needsScreenshot = false;
 sem_t gInitializeSemaphore;
 
+#ifdef RDKSHELL_DUAL_ODM_SUPPORT
+static Device_Mode_FactoryModes_t sFactoryMode = DEVICE_MODE_CVTE_B1_AGING;
+#endif
+
 #ifdef HIBERNATE_SUPPORT_ENABLED
 std::mutex gSuspendedOrHibernatedApplicationsMutex;
 map<string, bool> gSuspendedOrHibernatedApplications;
@@ -303,6 +307,88 @@ static bool waitForHibernateUnblocked(in
 
 #endif
 
+#ifdef RDKSHELL_READ_MAC_ON_STARTUP
+static bool checkFactoryMode_wrapper()
+{
+        Device_Mode_DeviceModes_t deviceMode;
+        bool ret = false;
+        Device_Mode_Result_t result = Device_Mode_getDeviceMode(&deviceMode);
+        if(result == DEVICE_MODE_RESULT_SUCCESS) {
+                if (deviceMode == DEVICE_MODE_FACTORY) {
+                        std::cout << "Device in FactoryMode\n";
+                        ret = true;
+                } else if (deviceMode == DEVICE_MODE_USER) {
+                        std::cout << "Device to be in User mode\n";
+                        ret = false;
+                }
+        }
+        return ret;
+}
+#endif
+
+#ifdef RDKSHELL_DUAL_FTA_SUPPORT
+static bool checkAssemblyFactoryMode_wrapper()
+{
+        Device_Mode_FactoryModes_t factoryMode;
+        bool ret = false;
+        Device_Mode_Result_t result = Device_Mode_getFactoryMode(&factoryMode);
+        if(result == DEVICE_MODE_RESULT_SUCCESS) {
+#ifdef RDKSHELL_DUAL_ODM_SUPPORT
+                if (factoryMode == DEVICE_MODE_ODM_1_FACTORY_MODE || factoryMode == DEVICE_MODE_ODM_2_FACTORY_MODE) {
+                        std::cout << "Device in Assembly FactoryMode\n";
+                        sFactoryMode = factoryMode;
+                        ret = true;
+                }
+#else
+                if (factoryMode == DEVICE_MODE_ODM_FACTORY_MODE) {
+                        std::cout << "Device in Assembly FactoryMode\n";
+                        ret = true;
+                }
+#endif
+        }
+        return ret;
+}
+
+char* getFactoryAppUrl()
+{
+        char* factoryAppUrl = NULL;
+#ifdef RDKSHELL_DUAL_ODM_SUPPORT
+        bool isOdmEnabled = checkAssemblyFactoryMode_wrapper();
+        if ((sFactoryMode == DEVICE_MODE_ODM_1_FACTORY_MODE) && (isOdmEnabled == true))
+        {
+                factoryAppUrl = getenv("RDKSHELL_ASSEMBLY_FACTORY_APP_URL");
+        }
+        else if ((sFactoryMode == DEVICE_MODE_ODM_2_FACTORY_MODE) && (isOdmEnabled == true))
+        {
+                factoryAppUrl = getenv("RDKSHELL_ASSEMBLY_FACTORY_2_APP_URL");
+        }
+        else if (isOdmEnabled == false)
+        {
+                Device_Mode_FactoryModes_t factoryMode;
+                Device_Mode_Result_t result = Device_Mode_getODMModeFromPID(&factoryMode);
+                if(result == DEVICE_MODE_RESULT_SUCCESS) {
+                        if (factoryMode == DEVICE_MODE_ODM_1_FACTORY_MODE || factoryMode == DEVICE_MODE_ODM_FACTORY_MODE) {
+                                factoryAppUrl = getenv("RDKSHELL_ASSEMBLY_FACTORY_APP_URL");
+                        } else if (factoryMode == DEVICE_MODE_ODM_2_FACTORY_MODE) {
+                                factoryAppUrl = getenv("RDKSHELL_ASSEMBLY_FACTORY_2_APP_URL");
+                        } else if(factoryMode == DEVICE_MODE_CVTE_AT_MODE) {
+                                factoryAppUrl = getenv("RDKSHELL_MAINBOARD_MANUFACTURING_FACTORY_APP_URL");
+                        } else {
+                                factoryAppUrl = getenv("RDKSHELL_MAINBOARD_MANUFACTURING_FACTORY_APP_URL");
+                        }
+                }
+        }
+	else
+        {
+                factoryAppUrl = getenv("RDKSHELL_MAINBOARD_MANUFACTURING_FACTORY_APP_URL");
+        }
+#else
+        factoryAppUrl = getenv("RDKSHELL_ASSEMBLY_FACTORY_APP_URL");
+#endif
+        return factoryAppUrl;
+}
+#endif
+
 namespace WPEFramework {
     namespace Plugin {
 
@@ -1545,27 +1631,24 @@ namespace WPEFramework {
             bool factoryMacMatched = false;
 #ifdef RFC_ENABLED
             #ifdef RDKSHELL_READ_MAC_ON_STARTUP
-            char* mac = new char[19];
-            tFHError retAPIStatus;
-            std::cout << "calling factory hal init\n";
-            factorySD1_init();
-            retAPIStatus = getEthernetMAC(mac);
-            if(retAPIStatus == E_OK)
-            {
-                if (strncasecmp(mac,"00:00:00:00:00:00",17) == 0)
-                {
-                    std::cout << "launching factory app as mac is matching... " << std::endl;
-                    factoryMacMatched = true;
-                }
-                else
-                {
-                    std::cout << "mac match failed... mac from hal - " << mac << std::endl;
-                }
-            }
-            else
-            {
-                std::cout << "reading stb mac hal api failed... " << std::endl;
-            }
+	    Device_Mode_Init();
+            factoryMacMatched = checkFactoryMode_wrapper();
+            #ifdef RDKSHELL_DUAL_FTA_SUPPORT
+            bool isAssemblyFactoryMode = false;
+            #endif
+            #ifdef RDKSHELL_IGNORE_PS_FLAG_ON_MBFTA
+            if(factoryMacMatched == false) {
+                    std::cout << "Modifying persistent store entry to false\n";
+                    uint32_t setStatus = setValue(mCurrentService, "FactoryTest", "FactoryMode", "false");
+                    std::cout << "set status: " << setStatus << std::endl;
+            } else {
+            #endif
+            #ifdef RDKSHELL_DUAL_FTA_SUPPORT
+            isAssemblyFactoryMode = checkAssemblyFactoryMode_wrapper();
+            #endif
+            #ifdef RDKSHELL_IGNORE_PS_FLAG_ON_MBFTA
+	    }
+	    #endif
             #else
             RFC_ParamData_t macparam;
             bool macret = Utils::getRFCConfig("Device.DeviceInfo.X_COMCAST-COM_STB_MAC", macparam);
@@ -1689,6 +1772,9 @@ namespace WPEFramework {
                                 request["nokillresapp"] = "true";
                             }
                             request["resetagingtime"] = "true";
+			    #ifdef RDKSHELL_DUAL_FTA_SUPPORT
+                            request["factoryappstage"] = isAssemblyFactoryMode ? "assembly" : "mainboard" ;
+                            #endif
                             RDKShellApiRequest apiRequest;
                             apiRequest.mName = "launchFactoryApp";
                             apiRequest.mRequest = request;
@@ -1748,6 +1834,9 @@ namespace WPEFramework {
                             request["nokillresapp"] = "true";
                         }
                         request["resetagingtime"] = "true";
+			#ifdef RDKSHELL_DUAL_FTA_SUPPORT
+                        request["factoryappstage"] = isAssemblyFactoryMode ? "assembly" : "mainboard" ;
+                        #endif
                         RDKShellApiRequest apiRequest;
                         apiRequest.mName = "launchFactoryApp";
                         apiRequest.mRequest = request;
@@ -5463,8 +5552,25 @@ namespace WPEFramework {
                 }
             }
 
-            char* factoryAppUrl = getenv("RDKSHELL_FACTORY_APP_URL");
-            if (NULL != factoryAppUrl)
+            #ifdef RDKSHELL_DUAL_FTA_SUPPORT
+            char* factoryAppUrl = NULL;
+            if (parameters.HasLabel("factoryappstage"))
+            {
+                std::string ftaStage;
+                getStringParameter("factoryappstage", ftaStage);
+                if (ftaStage == "assembly")
+                {
+                    factoryAppUrl =  getFactoryAppUrl();
+                }
+                else if (ftaStage == "mainboard")
+                {
+                    factoryAppUrl = getenv("RDKSHELL_MAINBOARD_MANUFACTURING_FACTORY_APP_URL");
+                }
+            }
+            #else
+             char* factoryAppUrl = getenv("RDKSHELL_FACTORY_APP_URL");
+            #endif
+	    if (NULL != factoryAppUrl)
             {
                 if (parameters.HasLabel("resetagingtime"))
                 {
@@ -6524,26 +6630,21 @@ namespace WPEFramework {
         {
             std::cout << "inside of checkForBootupFactoryAppLaunch\n";
 #ifdef RFC_ENABLED
-            #ifdef RDKSHELL_READ_MAC_ON_STARTUP
-            char* mac = new char[19];
-            tFHError retAPIStatus;
-            retAPIStatus = getEthernetMAC(mac);
-            if(retAPIStatus == E_OK)
-            {
-                if (strncasecmp(mac,"00:00:00:00:00:00",17) == 0)
-                {
-                    std::cout << "launching factory app as mac is matching... " << std::endl;
-                    return true;
-                }
-                else
-                {
-                    std::cout << "mac match failed... mac from hal - " << mac << std::endl;
-                }
-            }
-            else
-            {
-                std::cout << "reading stb mac via hal failed " << std::endl;
-            }
+	    #ifdef RDKSHELL_READ_MAC_ON_STARTUP
+	    if (checkFactoryMode_wrapper())
+	    {
+		    std::cout << "Device in FactoryMode\n";
+		    return true;
+	    }
+	    #ifdef RDKSHELL_IGNORE_PS_FLAG_ON_MBFTA
+	    else
+	    {
+		    std::cout << "Device in User mode\n";
+		    std::cout << "Modifying persistent store entry to false\n";
+		    uint32_t setStatus = setValue(mCurrentService, "FactoryTest", "FactoryMode", "false");
+		    std::cout << "set status: " << setStatus << std::endl;
+	    }
+	    #endif
             #else
             RFC_ParamData_t param;
             bool ret = Utils::getRFCConfig("Device.DeviceInfo.X_COMCAST-COM_STB_MAC", param);
